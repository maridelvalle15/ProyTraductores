// Generated by CoffeeScript 1.7.1
"use strict";
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['jquery', 'external/underscore', 'modules/core/uri', 'modules/dirty/streams/lib/check', 'modules/dirty/streams/lib/event_emitter'], function($j, $u, URI, _arg, EventEmitter) {
  var Backoff, EventBusQueue, ReconnectingEventBusQueue, check;
  check = _arg.check;
  Backoff = (function() {
    function Backoff(slot_time, max_delay_in_ms) {
      this.get_delay = __bind(this.get_delay, this);
      this.fail = __bind(this.fail, this);
      this.reset = __bind(this.reset, this);
      this.number_of_retries = 0;
      this.slot_time = slot_time;
      this.max_exponent = Math.floor(Math.log(max_delay_in_ms / this.slot_time) / Math.log(2));
    }

    Backoff.prototype.reset = function() {
      return this.number_of_retries = 0;
    };

    Backoff.prototype.fail = function() {
      return this.number_of_retries += 1;
    };

    Backoff.prototype.get_delay = function() {
      var delay, exponent;
      exponent = Math.min(Math.floor(this.number_of_retries * Math.sqrt(this.number_of_retries)), this.max_exponent);
      delay = Math.floor(Math.random() * (Math.pow(2, exponent))) * this.slot_time;
      return delay;
    };

    return Backoff;

  })();
  EventBusQueue = (function(_super) {
    __extends(EventBusQueue, _super);

    function EventBusQueue(queue_info) {
      this._handle_poll_error = __bind(this._handle_poll_error, this);
      this._handle_poll_success = __bind(this._handle_poll_success, this);
      this._long_poll = __bind(this._long_poll, this);
      EventBusQueue.__super__.constructor.call(this);
      this.queue_info = queue_info;
      this.host = queue_info.eventbus_endpoint;
      if (!this.host) {
        this.host = "eventbus.dropbox.com";
      }
      this.backoff = new Backoff(100, 5 * 60 * 1000);
      this.last_event_id = -1;
    }

    EventBusQueue.prototype.start = function() {
      if (this._started) {
        return;
      }
      this._started = true;
      return this._long_poll();
    };

    EventBusQueue.prototype.end = function() {
      this._started = false;
      if (this._long_poll_xhr != null) {
        return this._long_poll_xhr.abort();
      } else {
        return $u.defer((function(_this) {
          return function() {
            return _this.emit('close');
          };
        })(this));
      }
    };

    EventBusQueue.prototype._long_poll = function() {
      var longpoll_uri, queue_auth, queue_id, queue_token;
      if (!this._started) {
        return;
      }
      queue_id = this.queue_info['queue_id'];
      queue_token = this.queue_info['queue_token'];
      queue_auth = window.btoa(queue_id + ":" + queue_token);
      longpoll_uri = URI({
        scheme: 'https',
        authority: this.host,
        path: '/api/v1/events'
      });
      return this._long_poll_xhr = $j.ajax({
        contentType: 'application/json',
        url: longpoll_uri.toString(),
        type: 'POST',
        processData: false,
        noDropboxDefaults: true,
        data: JSON.stringify({
          last_event_id: this.last_event_id
        }),
        timeout: 60000,
        beforeSend: function(xhr) {
          return xhr.setRequestHeader('HTTP-X-EVENTQUEUE-AUTHORIZATION', 'Basic ' + queue_auth);
        },
        success: this._handle_poll_success,
        error: this._handle_poll_error
      });
    };

    EventBusQueue.prototype._handle_poll_success = function(data) {
      this._long_poll_xhr = null;
      if (data.result === "success" && (data.events != null) && data.events.length > 0) {
        this.emit('poll');
        this.backoff.reset();
        $u.defer(this._long_poll);
        this.last_event_id = data.events[data.events.length - 1].id;
        if (data.events[0].type !== "heartbeat") {
          return this.emit('events', data.events);
        }
      } else {
        console.warn("EventBusQueue: longpoll error:", data);
        this.backoff.fail();
        return window.setTimeout(this._long_poll, this.backoff.get_delay());
      }
    };

    EventBusQueue.prototype._handle_poll_error = function(xhr, reason) {
      this._long_poll_xhr = null;
      if (!this._started) {
        return this.emit('close', false);
      } else if (xhr.status >= 400 && xhr.status < 500) {
        this.emit('error', xhr.status);
        return this.emit('close', true);
      } else {
        console.warn("EventBusQueue: longpoll error:", reason, xhr.status);
        this.backoff.fail();
        return window.setTimeout(this._long_poll, this.backoff.get_delay());
      }
    };

    return EventBusQueue;

  })(EventEmitter);
  ReconnectingEventBusQueue = (function(_super) {
    __extends(ReconnectingEventBusQueue, _super);

    function ReconnectingEventBusQueue() {
      this._handle_queue_error = __bind(this._handle_queue_error, this);
      this._handle_queue_longpoll_success = __bind(this._handle_queue_longpoll_success, this);
      this._emit_events = __bind(this._emit_events, this);
      this._queue_request_failed = __bind(this._queue_request_failed, this);
      this._set_up_queue_with_info = __bind(this._set_up_queue_with_info, this);
      this._get_queue = __bind(this._get_queue, this);
      this.end = __bind(this.end, this);
      this.start = __bind(this.start, this);
      ReconnectingEventBusQueue.__super__.constructor.call(this);
      this.backoff = new Backoff(100, 5 * 60 * 1000);
      this.backoff_longpoll_400 = new Backoff(100, 10 * 60 * 1000);
      this.ended = false;
      this._reset_queue();
    }

    ReconnectingEventBusQueue.prototype._reset_queue = function() {
      if (this.queue != null) {
        this.queue.remove_all_listeners();
        this.queue.end();
        this.queue = null;
      }
      this.in_init = false;
      return this.started = false;
    };

    ReconnectingEventBusQueue.prototype.start = function() {
      if (!check(!this.ended, "Queue already ended")) {
        return;
      }
      if (this.started) {
        if (!this.in_init) {
          $u.defer((function(_this) {
            return function() {
              return _this.emit('ready');
            };
          })(this));
        }
        return;
      }
      this.started = this.in_init = true;
      return this._get_queue(this._set_up_queue_with_info, this._queue_request_failed);
    };

    ReconnectingEventBusQueue.prototype.end = function() {
      this._reset_queue();
      return this.ended = true;
    };

    ReconnectingEventBusQueue.prototype._get_queue = function(success, failure) {
      throw new Error('Not Implemented');
    };

    ReconnectingEventBusQueue.prototype._set_up_queue_with_info = function(queue_info) {
      if (this.ended) {
        return;
      }
      this.queue = new EventBusQueue(queue_info);
      this.queue.on('events', this._emit_events);
      this.queue.on('error', this._handle_queue_error);
      this.queue.on('poll', this._handle_queue_longpoll_success);
      this.in_init = false;
      this.backoff.reset();
      this.emit('ready');
      return this.queue.start();
    };

    ReconnectingEventBusQueue.prototype._queue_request_failed = function(xhr, reason) {
      var chillout_ms, chillout_seconds, error;
      if (this.ended) {
        return;
      }
      this.emit('error', 'Failed to start queue', reason);
      if (xhr.status !== 403 && xhr.status !== 400) {
        this.started = this.in_init = false;
        this.backoff.fail();
        try {
          chillout_seconds = JSON.parse(xhr.responseText).payload.chillout_seconds;
          chillout_seconds = Number(chillout_seconds);
          if (chillout_seconds < 0 || isNaN(chillout_seconds)) {
            throw Error('Backoff offset is invalid.');
          }
        } catch (_error) {
          error = _error;
          chillout_seconds = 0;
        }
        chillout_ms = chillout_seconds * 1000;
        return window.setTimeout(this.start, this.backoff.get_delay() + chillout_ms);
      }
    };

    ReconnectingEventBusQueue.prototype._emit_events = function(events) {
      return this.emit('events', events);
    };

    ReconnectingEventBusQueue.prototype._handle_queue_longpoll_success = function(code) {
      return this.backoff_longpoll_400.reset();
    };

    ReconnectingEventBusQueue.prototype._handle_queue_error = function(code) {
      if (code === 401 || code === 403) {
        this._reset_queue();
        return this.start();
      } else {
        this.backoff_longpoll_400.fail();
        this._reset_queue();
        return window.setTimeout(this.start, this.backoff_longpoll_400.get_delay());
      }
    };

    return ReconnectingEventBusQueue;

  })(EventEmitter);
  return ReconnectingEventBusQueue;
});

//# sourceMappingURL=reconnecting_queue.map
