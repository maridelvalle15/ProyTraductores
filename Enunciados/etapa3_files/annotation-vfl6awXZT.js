// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define(function() {
  var Annotation;
  Annotation = (function() {
    function Annotation(type, subtype) {
      if (type == null) {
        type = null;
      }
      if (subtype == null) {
        subtype = null;
      }
      this.subtypes = __bind(this.subtypes, this);
      this.types = __bind(this.types, this);
      this.getBubblePos = __bind(this.getBubblePos, this);
      this.getCenterPos = __bind(this.getCenterPos, this);
      this.type = type;
      this.subtype = subtype;
      this.boundaries = {
        x1: 0,
        y1: 0,
        x2: 0,
        y2: 0
      };
      this.pdf_coordinates = {};
      this.BUBBLE_WIDTH = 320;
    }

    Annotation.prototype.generateAnnotation = function(_annotation) {
      var annotation;
      annotation = new Annotation();
      annotation.revision = _annotation.revision;
      annotation.page = _annotation.page;
      annotation.zoom = _annotation.zoom;
      annotation.type = _annotation.type;
      annotation.subtype = _annotation.subtype;
      annotation.boundaries = _annotation.boundaries;
      annotation.pdf_coordinates = _annotation.pdf_coordinates;
      return annotation;
    };

    Annotation.prototype.toMetadataDict = function() {
      return {
        type: this.type,
        subtype: this.subtype,
        pdf_coordinates: this.pdf_coordinates
      };
    };

    Annotation.prototype.getCenterPos = function() {
      return {
        x: this.boundaries.x1 + ((this.boundaries.x2 - this.boundaries.x1) / 2),
        y: this.boundaries.y1 + ((this.boundaries.y2 - this.boundaries.y1) / 2)
      };
    };

    Annotation.prototype.getBubblePos = function() {
      return {
        x: this.getCenterPos().x - (this.BUBBLE_WIDTH / 2),
        y: this.getCenterPos().y + 30
      };
    };

    Annotation.prototype.types = function() {
      return {
        MARKER: 0
      };
    };

    Annotation.prototype.subtypes = function(type) {
      switch (type) {
        case this.types().MARKER:
          return {
            CIRCLE: 0
          };
        default:
          return {};
      }
    };

    return Annotation;

  })();
  return Annotation;
});

//# sourceMappingURL=annotation.map
