// Generated by CoffeeScript 1.7.1
define(['external/react', 'modules/clean/ajax', 'modules/clean/em_string', 'modules/clean/filepath', 'modules/clean/form', 'modules/clean/react/modal', 'modules/core/i18n', 'modules/core/notify'], function(React, ajax, Emstring, FilePath, Form, _arg, _arg1, Notify) {
  var Modal, SharedFolderSettingsModal, d, _;
  Modal = _arg.Modal;
  _ = _arg1._;
  d = React.DOM;
  SharedFolderSettingsModal = React.createClass({
    statics: {
      showInstance: function(sharedFolderSettingsModalContent) {
        return Modal.showInstance(sharedFolderSettingsModalContent);
      }
    },
    propTypes: {
      user: React.PropTypes.object.isRequired,
      fq_path: React.PropTypes.string.isRequired,
      is_shared_folder: React.PropTypes.bool.isRequired,
      ns_id: React.PropTypes.number,
      initial_allows_editor_manage_membership: React.PropTypes.bool.isRequired,
      done_callback: React.PropTypes.func.isRequired
    },
    getInitialState: function() {
      return {
        allows_manage_membership: this.props.initial_allows_editor_manage_membership
      };
    },
    render: function() {
      var snippetted_filename;
      snippetted_filename = Emstring.em_snippet(FilePath.filename(this.props.fq_path), 16);
      return Modal({
        title: _("\u2018%(filename)s\u2019 settings").format({
          filename: snippetted_filename
        }),
        acceptButtonText: _('Done'),
        autoClose: false,
        showX: false,
        onAccept: this._onDone,
        ref: 'modal'
      }, d.div({}, d.input({
        type: 'checkbox',
        onChange: this._checkboxUpdated,
        checked: this.state.allows_manage_membership,
        id: 'allows-manage-membership-setting'
      }), d.label({
        className: "simple-sharing-allows-manage-membership-label",
        htmlFor: "allows-manage-membership-setting"
      }, _("Allow editors to manage membership of this folder"))));
    },
    _onDone: function() {
      this.refs['modal'].close();
      return this.props.done_callback.bind(null, this.state.allows_manage_membership)();
    },
    _checkboxUpdated: function(event) {
      var new_permissions;
      if (this.props.is_shared_folder) {
        new_permissions = event.target.checked ? 1 : 0;
        return ajax.WebRequest({
          subject_user: this.props.user.id,
          url: '/share_ajax/change_sf_perm',
          data: {
            ns_id: this.props.ns_id,
            new_permissions: new_permissions
          },
          success: (function(_this) {
            return function(resp) {
              var msg, success, _ref;
              _ref = Form.parse_response(resp), success = _ref[0], msg = _ref[1];
              if (success) {
                if (new_permissions === 1) {
                  Notify.success(_("Editors can now manage membership of this folder."));
                } else {
                  Notify.success(_("Editors can no longer manage membership of this folder"));
                }
                return _this.setState({
                  allows_manage_membership: new_permissions === 1
                });
              } else {
                return Notify.error(msg);
              }
            };
          })(this)
        });
      } else {
        return this.setState({
          allows_manage_membership: event.target.checked
        });
      }
    }
  });
  return SharedFolderSettingsModal;
});

//# sourceMappingURL=shared_folder_settings_modal.map
