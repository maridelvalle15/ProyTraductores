// Generated by CoffeeScript 1.7.1
define(['external/react', 'modules/core/i18n', 'modules/clean/react/tooltip', 'modules/clean/avatar/components'], function(React, _arg, Tooltip, _arg1) {
  var AvatarWithDefault, InitialsAvatar, MAX_PHOTOS, UsersToNotify, ViewerAvatar, d, ungettext, _;
  _ = _arg._, ungettext = _arg.ungettext;
  AvatarWithDefault = _arg1.AvatarWithDefault, InitialsAvatar = _arg1.InitialsAvatar, ViewerAvatar = _arg1.ViewerAvatar;
  d = React.DOM;
  MAX_PHOTOS = 6;
  UsersToNotify = React.createClass({
    propTypes: {
      usersToNotify: React.PropTypes.array.isRequired,
      user: React.PropTypes.object.isRequired
    },
    render: function() {
      var facepile_subscribers, facepile_tooltip_contents, filtered_users, i, more, more_subscribers, more_tooltip_contents, user, _fn, _i, _len;
      filtered_users = (function() {
        var _i, _len, _ref, _results;
        _ref = this.props.usersToNotify;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          user = _ref[_i];
          _results.push(user);
        }
        return _results;
      }).call(this);
      facepile_subscribers = [];
      more_subscribers = [];
      _fn = (function(_this) {
        return function(user) {
          if (i < MAX_PHOTOS) {
            return facepile_subscribers.push(user);
          } else {
            return more_subscribers.push(user);
          }
        };
      })(this);
      for (i = _i = 0, _len = filtered_users.length; _i < _len; i = ++_i) {
        user = filtered_users[i];
        _fn(user);
      }
      return d.div({
        className: "notify-facepile-container"
      }, (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = facepile_subscribers.length; _j < _len1; _j++) {
          user = facepile_subscribers[_j];
          facepile_tooltip_contents = d.div({}, user.display_name);
          _results.push(d.div({
            className: "notify-facepile-photo",
            key: user.id
          }, Tooltip.Tooltip({
            position: Tooltip.TooltipPosition.BOTTOM,
            tooltip_contents: facepile_tooltip_contents,
            tooltip_classname: "notification-names-tooltip"
          }, ViewerAvatar({
            dimension: 32,
            photoUrl: user.photo_circle_url,
            defaultAvatar: new InitialsAvatar({
              dimension: 32,
              shape: 'CIRCLE',
              initials: user.initials
            }),
            key: user.id
          }))));
        }
        return _results;
      })(), filtered_users.length > MAX_PHOTOS ? (more_tooltip_contents = d.div({}, (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = more_subscribers.length; _j < _len1; _j++) {
          more = more_subscribers[_j];
          _results.push(d.div({}, more.get_display_identity()));
        }
        return _results;
      })()), Tooltip.Tooltip({
        position: Tooltip.TooltipPosition.BOTTOM,
        tooltip_contents: more_tooltip_contents,
        tooltip_classname: "notification-names-tooltip"
      }, d.div({
        className: "notify-facepile-more"
      }, "+" + (filtered_users.length - MAX_PHOTOS)))) : void 0);
    }
  });
  return UsersToNotify;
});

//# sourceMappingURL=users_to_notify_facepile.map
