// Generated by CoffeeScript 1.7.1
define(['modules/clean/ajax', 'modules/core/notify', 'modules/core/i18n'], function(ajax, Notify, _arg) {
  var PaginationManager, _;
  _ = _arg._;
  PaginationManager = (function() {
    var RoleDependentMode, RoleIndependentMode;

    function PaginationManager() {}

    RoleDependentMode = (function() {
      function RoleDependentMode(userRole, hasMoreItems) {
        this.userRole = userRole;
        this.hasMoreItems = hasMoreItems;
      }

      RoleDependentMode.prototype.areAllItemsReady = function(role) {
        if (role == null) {
          role = this.userRole;
        }
        if (role === Constants.ROLE_BOTH) {
          return !(this.hasMoreItems[Constants.ROLE_PERSONAL] || this.hasMoreItems[Constants.ROLE_WORK]);
        } else {
          return !this.hasMoreItems[role];
        }
      };

      RoleDependentMode.prototype.invalidateHasMore = function() {
        var role, _results;
        _results = [];
        for (role in this.hasMoreItems) {
          _results.push(this.hasMoreItems[role] = true);
        }
        return _results;
      };

      RoleDependentMode.prototype.addDataToAjax = function(postData) {
        return postData.role = this.areAllItemsReady() ? Constants.ROLE_BOTH : this.userRole;
      };

      return RoleDependentMode;

    })();

    RoleIndependentMode = (function() {
      function RoleIndependentMode(hasMoreItems) {
        this.hasMoreItems = hasMoreItems;
      }

      RoleIndependentMode.prototype.areAllItemsReady = function() {
        return !this.hasMoreItems;
      };

      RoleIndependentMode.prototype.invalidateHasMore = function() {
        return this.hasMoreItems = true;
      };

      RoleIndependentMode.prototype.addDataToAjax = function() {};

      return RoleIndependentMode;

    })();

    PaginationManager.prototype.initialize = function(firstPage, keyName, ajaxURL, userID, newDataAvailableCallback) {
      this.ajaxURL = ajaxURL;
      this.newDataCallback = newDataAvailableCallback;
      this.autoFetching = false;
      this.mode = new RoleIndependentMode(firstPage.has_more_items);
      this.keyName = keyName;
      this.items = {};
      this.pages = [];
      this.nextRequestVoucher = firstPage.next_request_voucher;
      this.userID = userID;
      return this._addPage(firstPage.items);
    };

    PaginationManager.prototype.areAllItemsReady = function(role) {
      return this.mode.areAllItemsReady(role);
    };

    PaginationManager.prototype._addPage = function(newItems) {
      var item, itemKey, newUniqueItems, pageKeys, _i, _len;
      pageKeys = [];
      newUniqueItems = [];
      for (_i = 0, _len = newItems.length; _i < _len; _i++) {
        item = newItems[_i];
        itemKey = item[this.keyName];
        if (itemKey == null) {
          Notify.warning(_("Invalid server response"));
          return;
        }
        if (this.items[itemKey] == null) {
          this.items[itemKey] = item;
          newUniqueItems.push(item);
          pageKeys.push(itemKey);
        }
      }
      this.pages.push(pageKeys);
      return this.newDataCallback(this, newUniqueItems);
    };

    PaginationManager.prototype.startAutoFetching = function() {
      this.autoFetching = true;
      return this.fetchNext();
    };

    PaginationManager.prototype.stopAutoFetching = function() {
      return this.autoFetching = false;
    };

    PaginationManager.prototype.setUserRole = function(userRole) {
      return this.mode = new RoleDependentMode(userRole, this.mode.hasMoreItems);
    };

    PaginationManager.prototype.reSync = function(reloadData) {
      var shouldResumeAutoFetching;
      if (reloadData == null) {
        reloadData = false;
      }
      if (reloadData) {
        this.nextRequestVoucher = null;
        this.items = {};
        this.pages = [];
      }
      shouldResumeAutoFetching = this.autoFetching && this.mode.areAllItemsReady(Constants.ROLE_BOTH);
      this.mode.invalidateHasMore();
      if (shouldResumeAutoFetching) {
        return this.startAutoFetching();
      }
    };

    PaginationManager.prototype.fetchNext = function() {
      var postData;
      if (this.mode.areAllItemsReady(Constants.ROLE_BOTH)) {
        return;
      }
      postData = {};
      if (this.nextRequestVoucher) {
        postData["voucher"] = this.nextRequestVoucher;
      }
      this.mode.addDataToAjax(postData);
      return ajax.WebRequest({
        url: this.ajaxURL,
        data: postData,
        subject_user: this.userID,
        success: (function(_this) {
          return function(data) {
            data = JSON.parse(data);
            _this.nextRequestVoucher = data.next_request_voucher;
            _this.mode.hasMoreItems = data.has_more_items;
            if (_this.autoFetching) {
              _this.fetchNext();
            }
            return _this._addPage(data.items);
          };
        })(this),
        error: (function(_this) {
          return function() {
            return Notify.error();
          };
        })(this)
      });
    };

    PaginationManager.prototype.loadedPageCount = function() {
      return this.pages.length;
    };

    PaginationManager.prototype.getLoadedPage = function(idx) {
      var key, pageItems, pageKeys, _i, _len;
      pageItems = [];
      pageKeys = this.pages[idx];
      if (pageKeys == null) {
        return null;
      }
      for (_i = 0, _len = pageKeys.length; _i < _len; _i++) {
        key = pageKeys[_i];
        pageItems.push(this.items[key]);
      }
      return pageItems;
    };

    PaginationManager.prototype.getLastLoadedPage = function() {
      return this.getLoadedPage(this.loadedPageCount() - 1);
    };

    return PaginationManager;

  })();
  return PaginationManager;
});

//# sourceMappingURL=pagination_manager.map
