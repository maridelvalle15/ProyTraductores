// Generated by CoffeeScript 1.7.1
define(["external/react", 'modules/core/i18n', 'modules/clean/react/sprite'], function(React, I18n, Sprite) {
  var BEM, HierarchicalNavBar, HierarchicalNavBarMenuItem, NAV_BEM, d, toArray, _;
  d = React.DOM;
  _ = I18n._;
  toArray = function(classNames) {
    var className;
    if (classNames == null) {
      classNames = [];
    }
    if (typeof classNames === 'string') {
      classNames = [classNames];
    }
    classNames = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = classNames.length; _i < _len; _i++) {
        className = classNames[_i];
        if (className != null) {
          _results.push(className);
        }
      }
      return _results;
    })();
    return classNames;
  };
  BEM = function(blocks, elements, modifiers) {
    var blockClassName, className, elementClassName;
    blocks = toArray(blocks);
    elements = toArray(elements);
    modifiers = toArray(modifiers);
    blockClassName = blocks.join('__');
    elementClassName = elements.join('__');
    className = blockClassName;
    if (elementClassName !== '') {
      className += '__' + elementClassName;
    }
    modifiers = modifiers.map(function(modifier) {
      return className + '--' + modifier;
    }).join(' ');
    return className + ' ' + modifiers;
  };
  NAV_BEM = BEM.bind(null, 'hierarchical-nav-bar');
  HierarchicalNavBar = React.createClass({
    propTypes: {
      'nav-items': React.PropTypes.array,
      id: React.PropTypes.string,
      shouldRenderHeader: React.PropTypes.bool
    },
    getDefaultProps: function() {
      return {
        'nav-items': [],
        shouldRenderHeader: true
      };
    },
    hasIcons: function(items) {
      var item, _i, _len;
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        if (item.icon != null) {
          return true;
        }
        if ((item.children != null) && this.hasIcons(item.children)) {
          return true;
        }
      }
      return false;
    },
    renderHeader: function() {
      var logo;
      logo = d.img({
        src: '/static/images/icons/blue_dropbox_glyph-vflJ8-C5d.png',
        alt: _('Dropbox home')
      });
      return d.a({
        href: '/',
        id: 'home-icon',
        className: NAV_BEM('home-icon')
      }, logo);
    },
    renderNavItems: function() {
      var item, items;
      items = this.props['nav-items'];
      return d.ul({
        className: NAV_BEM('nav', ['root', !this.hasIcons(items) ? 'no-icon' : void 0])
      }, (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          item = items[_i];
          _results.push(React.createElement(HierarchicalNavBarMenuItem, {
            item: item
          }));
        }
        return _results;
      })());
    },
    render: function() {
      return d.div({
        className: NAV_BEM()
      }, [this.props.shouldRenderHeader ? this.renderHeader() : void 0, this.renderNavItems()]);
    }
  });
  HierarchicalNavBarMenuItem = React.createClass({
    propTypes: {
      item: React.PropTypes.object,
      depth: React.PropTypes.number
    },
    getDefaultProps: function() {
      return {
        item: {
          href: '#',
          label: '',
          selected: false,
          children: []
        },
        depth: 1
      };
    },
    getItemIcon: function() {
      var icon;
      icon = this.props.item.icon;
      if (icon != null) {
        return React.createElement(Sprite, icon);
      } else {
        return null;
      }
    },
    getIconLabel: function() {
      return d.span({
        className: NAV_BEM('nav-item-label')
      }, this.props.item.label);
    },
    renderItemLink: function() {
      var className, href, id;
      href = this.props.item.href;
      id = "" + this.props.item.key + "_link";
      className = NAV_BEM('nav-item-link');
      return d.a({
        href: href,
        id: id,
        className: className
      }, [this.getItemIcon(), this.getIconLabel()]);
    },
    renderChildItems: function(children) {
      var child, childDepth, childItem, childItems, _i, _len;
      childItems = [];
      childDepth = this.props.depth + 1;
      for (_i = 0, _len = children.length; _i < _len; _i++) {
        child = children[_i];
        childItem = React.createElement(HierarchicalNavBarMenuItem, {
          item: child,
          depth: childDepth
        });
        childItems.push(childItem);
      }
      return d.ul({
        className: NAV_BEM('nav')
      }, childItems);
    },
    render: function() {
      var childItems, children, modifiers;
      children = this.props.item.children;
      if (children != null ? children.length : void 0) {
        childItems = this.renderChildItems(children);
      }
      modifiers = ["level-" + this.props.depth, this.props.item.icon == null ? 'no-icon' : void 0, this.props.item.selected ? 'selected' : void 0];
      return d.li({
        className: NAV_BEM('nav-item', modifiers)
      }, [this.renderItemLink(), childItems]);
    }
  });
  return {
    HierarchicalNavBar: HierarchicalNavBar
  };
});

//# sourceMappingURL=hierarchical_nav_bar.map
