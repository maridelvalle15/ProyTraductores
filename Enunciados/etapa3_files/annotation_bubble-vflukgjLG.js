// Generated by CoffeeScript 1.7.1
define(['external/react', 'modules/core/i18n', 'modules/clean/activity/activity_user', 'modules/clean/keycode', 'modules/clean/storage', 'modules/dirty/react/activity/comment_input'], function(React, _arg, ActivityUser, KeyCode, _arg1, CommentInput) {
  var AnnotationBubble, LocalStorage, ReactCSSTransitionGroup, d, _;
  _ = _arg._;
  LocalStorage = _arg1.LocalStorage;
  d = React.DOM;
  ReactCSSTransitionGroup = React.addons.CSSTransitionGroup;
  return AnnotationBubble = React.createClass({
    displayName: "AnnotationBubble",
    propTypes: {
      user: React.PropTypes.object.isRequired,
      activity: React.PropTypes.object.isRequired,
      contextActivityStore: React.PropTypes.object.isRequired,
      x: React.PropTypes.number,
      y: React.PropTypes.number,
      showBubble: React.PropTypes.bool,
      in_blank_state: React.PropTypes.bool,
      onAddComment: React.PropTypes.func,
      annotation: React.PropTypes.object.isRequired
    },
    getInitialState: function() {
      var button_disabled, initial_text, show_post_button;
      button_disabled = true;
      show_post_button = false;
      initial_text = "";
      return {
        button_disabled: button_disabled,
        show_post_button: show_post_button,
        initial_text: initial_text
      };
    },
    onInputFocus: function(event) {
      return {};
    },
    onInputBlur: function(event) {
      return {};
    },
    onAddComment: function(text) {
      var _base;
      return typeof (_base = this.props).onAddComment === "function" ? _base.onAddComment(text, this.props.annotation) : void 0;
    },
    _renderCommentBox: function() {
      var placeholderText;
      if (this.props.in_blank_state) {
        placeholderText = _("Write a comment");
      } else {
        placeholderText = _("Comment or @mention");
      }
      return d.div({
        className: "annotation-bubble__field"
      }, CommentInput({
        ref: "commentInput",
        activity: this.props.activity,
        user: this.props.user,
        in_blank_state: false,
        enableNotifyText: false,
        enableNoNotifyHint: false,
        comment_metadata_allowed: true,
        contacts_should_dropdown: false,
        comment_callback: this.onAddComment,
        onFocus: this.onInputFocus,
        onBlur: this.onInputBlur
      }));
    },
    render: function() {
      var bubbleUI;
      bubbleUI = [];
      if (this.props.showBubble) {
        bubbleUI = [
          d.div({
            className: "annotation-bubble bubble-dropdown top",
            style: {
              left: this.props.x || 0,
              top: this.props.y || 0
            }
          }, this._renderCommentBox(), d.div({
            className: "bubble-arrow-border"
          }), d.div({
            className: "bubble-arrow"
          }))
        ];
      }
      return d.div({}, ReactCSSTransitionGroup({
        transitionName: "annotation-bubble"
      }, this.props.showBubble ? bubbleUI : void 0));
    }
  });
});

//# sourceMappingURL=annotation_bubble.map
