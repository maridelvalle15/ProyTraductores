// Generated by CoffeeScript 1.7.1
define(['jquery', 'dropbox', 'external/react', 'modules/core/exception', 'modules/core/i18n', 'modules/core/notify', "modules/core/uri", "modules/clean/ajax", 'modules/clean/activity/activity', 'modules/clean/analytics', 'modules/clean/clipboard', 'modules/clean/filepath', 'modules/clean/react/sprite_div'], function($j, _arg, React, _arg1, _arg2, Notify, URI, ajax, Activity, _arg3, clipboard, FilePath, SpriteDiv) {
  var ActivityContext, FileFeedbackSharingSection, SharingShmodel, WebLightboxLogger, assert, d, get_height_by_activity_context, _;
  SharingShmodel = _arg.SharingShmodel;
  assert = _arg1.assert;
  _ = _arg2._;
  WebLightboxLogger = _arg3.WebLightboxLogger;
  d = React.DOM;
  ActivityContext = Activity.ActivityContext;
  get_height_by_activity_context = function(activity_context) {
    switch (activity_context) {
      case ActivityContext.BROWSE_LIGHTBOX:
        return 100;
      case ActivityContext.SHARED_LINK_VIEW:
      case ActivityContext.SHARED_LINK_LIGHTBOX:
        return 160;
      default:
        return assert(false);
    }
  };
  FileFeedbackSharingSection = React.createClass({
    propTypes: {
      activity_context: React.PropTypes.number,
      activity_context_data: React.PropTypes.string,
      height: React.PropTypes.number,
      user: React.PropTypes.object
    },
    render: function() {
      var get_link_button_text, show_copyable_inline_link;
      show_copyable_inline_link = this.props.activity_context !== ActivityContext.BROWSE_LIGHTBOX;
      get_link_button_text = show_copyable_inline_link ? _("Copy link") : _("Get link");
      return d.div({
        className: "file-feedback-sharing-section file-feedback-section",
        style: {
          height: this.props.height
        }
      }, d.div({
        className: "file-feedback-section-header"
      }, d.div({
        className: "file-feedback-section-header-inner"
      }, d.span({
        className: "title"
      }, _("Sharing options"))), d.hr({
        className: "separator"
      })), d.div({
        ref: "contentContainer",
        className: "file-feedback-sharing-section-content"
      }, show_copyable_inline_link ? this._renderInlineLink(this.props.activity_context_data) : void 0, d.div({
        className: "share-button share-facebook",
        onClick: this._shareFacebook
      }, SpriteDiv({
        group: "web",
        name: "share_facebook_icon",
        text: _("Post")
      })), d.div({
        className: "share-button share-twitter",
        onClick: this._shareTwitter
      }, SpriteDiv({
        group: "web",
        name: "share_twitter_icon",
        text: _("Tweet")
      })), this._canCopyToClipboard() || !show_copyable_inline_link ? d.div({
        ref: "getLinkButton",
        className: "share-button share-link",
        onClick: this._shareGetLink
      }, SpriteDiv({
        group: "web",
        name: "share_get_link_icon",
        text: get_link_button_text
      })) : void 0));
    },
    _renderInlineLink: function(link) {
      return d.div({
        className: "inline-link-container"
      }, d.div({
        className: "inline-link-desc"
      }, _("Link to share")), d.div({
        className: "inline-link-text text-input text-input-inline small"
      }, d.div({
        className: "text-input-wrapper"
      }, d.input({
        readOnly: true,
        type: "text",
        value: link,
        className: "text-input-input",
        onClick: this._onInlineLinkTextInputClicked
      }))));
    },
    componentDidMount: function() {
      return this._logEvent(WebLightboxLogger.SOCIAL_SHARE_VIEW);
    },
    componentDidUpdate: function() {
      var get_link_button;
      if (this.props.activity_context !== ActivityContext.BROWSE_LIGHTBOX && this._canCopyToClipboard()) {
        if (!this.state.generated_clipboard_overlay) {
          get_link_button = this.refs.getLinkButton.getDOMNode();
          if (get_link_button.offsetWidth > 0) {
            clipboard.clipboard_overlay(this.props.activity_context_data, $j(get_link_button), (function(_this) {
              return function() {
                Notify.success(_('Link copied to clipboard'));
                return _this._logEvent(WebLightboxLogger.SOCIAL_SHARE_GET_LINK);
              };
            })(this), $j(this.refs.contentContainer.getDOMNode()));
            return this.setState({
              generated_clipboard_overlay: true
            });
          }
        }
      }
    },
    getInitialState: function() {
      return {
        generated_clipboard_overlay: false
      };
    },
    _onInlineLinkTextInputClicked: function(event) {
      event.target.select();
      return this._logEvent(WebLightboxLogger.SOCIAL_SHARE_SELECT_INLINE_LINK);
    },
    _popupShare: function(url_constructor_fn) {
      var on_shared_link_generated, popup;
      popup = window.open("", "sharing", "width=550,height=420");
      popup.document.write(_("Loading..."));
      on_shared_link_generated = (function(_this) {
        return function(link) {
          return popup.location = url_constructor_fn(link);
        };
      })(this);
      return this._generateSharedLink(on_shared_link_generated);
    },
    _shareFacebook: function() {
      var url_constructor_fn;
      url_constructor_fn = (function(_this) {
        return function(link) {
          return URI({
            scheme: "https",
            authority: "facebook.com",
            path: "/sharer.php",
            query: {
              u: link
            }
          }).toString();
        };
      })(this);
      this._popupShare(url_constructor_fn);
      this._logEvent(WebLightboxLogger.SOCIAL_SHARE_FACEBOOK);
      return false;
    },
    _shareTwitter: function() {
      var url_constructor_fn;
      url_constructor_fn = function(link) {
        return URI({
          scheme: "https",
          authority: "twitter.com",
          path: "/intent/tweet",
          query: {
            url: link,
            text: "Shared from Dropbox"
          }
        }).toString();
      };
      this._popupShare(url_constructor_fn);
      this._logEvent(WebLightboxLogger.SOCIAL_SHARE_TWITTER);
      return false;
    },
    _shareGetLink: function() {
      switch (this.props.activity_context) {
        case ActivityContext.BROWSE_LIGHTBOX:
          SharingShmodel.shmodel(this.props.activity_context_data, "browse_lightbox");
          break;
        case ActivityContext.SHARED_LINK_VIEW:
        case ActivityContext.SHARED_LINK_LIGHTBOX:
          break;
        default:
          assert(false);
      }
      this._logEvent(WebLightboxLogger.SOCIAL_SHARE_GET_LINK);
      return false;
    },
    _generateSharedLink: function(on_link_generated) {
      switch (this.props.activity_context) {
        case ActivityContext.BROWSE_LIGHTBOX:
          return ajax.WebRequest({
            url: URI({
              path: "/sm/get_link" + this.props.activity_context_data
            }).toString(),
            data: {
              origin: "browse_lightbox"
            },
            success: (function(_this) {
              return function(resp) {
                var link, response;
                response = JSON.parse(resp);
                link = response.link;
                return typeof on_link_generated === "function" ? on_link_generated(link) : void 0;
              };
            })(this),
            error: (function(_this) {
              return function() {
                return Notify.error(_("An error occurred, please try again."));
              };
            })(this),
            subject_user: this.props.user.id
          });
        case ActivityContext.SHARED_LINK_VIEW:
        case ActivityContext.SHARED_LINK_LIGHTBOX:
          return typeof on_link_generated === "function" ? on_link_generated(this.props.activity_context_data) : void 0;
        default:
          return assert(false);
      }
    },
    _logEvent: function(event_name) {
      return WebLightboxLogger.log(event_name, {
        context: this._getContextForLogging(),
        file_ext: this._getFileExtForLogging()
      });
    },
    _getContextForLogging: function() {
      switch (this.props.activity_context) {
        case ActivityContext.BROWSE_LIGHTBOX:
          return "browse_lightbox";
        case ActivityContext.SHARED_LINK_VIEW:
          return "shmodel_view";
        case ActivityContext.SHARED_LINK_LIGHTBOX:
          return "shmodel_lightbox";
        default:
          return assert(false);
      }
    },
    _getFileExtForLogging: function() {
      var parsed_uri;
      switch (this.props.activity_context) {
        case ActivityContext.BROWSE_LIGHTBOX:
          return FilePath.file_extension_for_logging(this.props.activity_context_data);
        case ActivityContext.SHARED_LINK_VIEW:
        case ActivityContext.SHARED_LINK_LIGHTBOX:
          parsed_uri = URI.parse(this.props.activity_context_data);
          return FilePath.file_extension_for_logging(parsed_uri.getPath());
        default:
          return assert(false);
      }
    },
    _canCopyToClipboard: function() {
      return FlashDetect.installed;
    }
  });
  return {
    get_height_by_activity_context: get_height_by_activity_context,
    FileFeedbackSharingSection: FileFeedbackSharingSection
  };
});

//# sourceMappingURL=file_feedback_sharing_section.map
