// Generated by CoffeeScript 1.7.1
var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

define(['jquery', 'external/react', 'modules/core/browser', 'modules/core/exception', 'modules/core/i18n', 'modules/clean/activity/activity', 'modules/clean/keycode', 'modules/clean/react/activity/contacts_selector', 'modules/clean/react/react_i18n', 'modules/clean/validators/validators'], function($j, React, Browser, JSException, i18n, Activity, keycode, ContactsSelector, ReactI18n, validators) {
  var ContactsSelectorPopup, R_, d, emailvalidator, keycodeSet;
  d = React.DOM;
  R_ = ReactI18n.R_;
  keycodeSet = [keycode.UP, keycode.DOWN, keycode.ESC, keycode.ENTER, keycode.TAB];
  emailvalidator = validators.check(validators.create(["EmailValidator"]));
  ContactsSelectorPopup = React.createClass({
    displayName: "ContactsSelectorPopup",
    propTypes: {
      showContactsInNullState: React.PropTypes.bool,
      should_dropdown: React.PropTypes.bool,
      user: React.PropTypes.object,
      contactHighlightedCallback: React.PropTypes.func,
      contactSelectedCallback: React.PropTypes.func,
      emailEnteredCallback: React.PropTypes.func,
      clearContactHighlightedCallback: React.PropTypes.func,
      onAddPeopleMouseUp: React.PropTypes.func,
      onSkipAddMention: React.PropTypes.func
    },
    getInitialState: function() {
      return {
        query: "",
        show_contacts: true,
        last_keydown: -1,
        shouldShowNoNotifyHint: false
      };
    },
    getDefaultProps: function() {
      return {
        showContactsInNullState: true
      };
    },
    showNoNotifyHint: function() {
      var _base;
      this.setState({
        shouldShowNoNotifyHint: true
      });
      return typeof (_base = this.props).clearContactHighlightedCallback === "function" ? _base.clearContactHighlightedCallback() : void 0;
    },
    contactHighlightedCallback: function($suggestion) {
      var _base;
      JSException.assert(!this.state.shouldShowNoNotifyHint, "Should not have highlight callback in no notify state");
      return typeof (_base = this.props).contactHighlightedCallback === "function" ? _base.contactHighlightedCallback($suggestion) : void 0;
    },
    contactSelectedCallback: function($suggestion) {
      var _base;
      this._resetInput();
      return typeof (_base = this.props).contactSelectedCallback === "function" ? _base.contactSelectedCallback($suggestion) : void 0;
    },
    _resetInput: function() {
      this.setState({
        query: ''
      });
      $j(this.refs.contactSelectorPopupInput.getDOMNode()).val('');
      return this.refs.contactSelectorPopup.get_suggestions('');
    },
    _onInputKeyDown: function(event) {
      var normalizeKeycode, query, _base;
      normalizeKeycode = event.keyCode || event.which || event.charCode;
      if ((Browser.msie != null) && normalizeKeycode === keycode.ENTER) {
        query = event.target.value;
        if (this.refs.contactSelectorPopup.get_suggestions_count() > 0) {
          return this.refs.contactSelectorPopup.navigate_suggestions(event);
        } else if (emailvalidator(query)) {
          return typeof (_base = this.props).emailEnteredCallback === "function" ? _base.emailEnteredCallback(query) : void 0;
        }
      }
    },
    _onInputKeyUp: function(event) {
      var normalizeKeycode, query, _base;
      normalizeKeycode = event.keyCode || event.which || event.charCode;
      query = event.target.value;
      if (this.refs.contactSelectorPopup != null) {
        if (__indexOf.call(keycodeSet, normalizeKeycode) >= 0) {
          if (this.refs.contactSelectorPopup.get_suggestions_count() > 0) {
            return this.refs.contactSelectorPopup.navigate_suggestions(event);
          } else if (normalizeKeycode === keycode.ENTER && emailvalidator(query)) {
            return typeof (_base = this.props).emailEnteredCallback === "function" ? _base.emailEnteredCallback(query) : void 0;
          }
        } else {
          this.setState({
            query: query
          });
          return this.refs.contactSelectorPopup.get_suggestions(query);
        }
      }
    },
    _onAddPeopleMouseUp: function(event) {
      var _base;
      this.setState({
        shouldShowNoNotifyHint: false
      }, (function(_this) {
        return function() {
          var _ref;
          return $j((_ref = _this.refs.contactSelectorPopupInput) != null ? _ref.getDOMNode() : void 0).focus();
        };
      })(this));
      return typeof (_base = this.props).onAddPeopleMouseUp === "function" ? _base.onAddPeopleMouseUp(event) : void 0;
    },
    _onSkipAddMention: function(event) {
      var _base;
      return typeof (_base = this.props).onSkipAddMention === "function" ? _base.onSkipAddMention(event) : void 0;
    },
    render: function() {
      var _dividerUI, _inputUI, _selectorUI;
      return d.div({
        className: "contacts-selector-popup"
      }, this.state.shouldShowNoNotifyHint ? d.div({
        className: "contacts-selector-hint"
      }, "Your comment won't notify anyone.", d.div({}), d.a({
        className: "",
        onMouseUp: this._onAddPeopleMouseUp
      }, "Add people"), d.span({
        className: "bottom-dot"
      }, " \u00B7 "), d.a({
        className: "",
        onMouseUp: this._onSkipAddMention
      }, "Just for me")) : (_inputUI = d.div({
        className: "contacts-selector-popup-input-wrapper"
      }, d.input({
        ref: "contactSelectorPopupInput",
        onKeyDown: this._onInputKeyDown,
        onKeyUp: this._onInputKeyUp,
        placeholder: "Type an email or name"
      })), _dividerUI = this.state.query.trim().length > 0 || this.props.showContactsInNullState ? d.hr({
        className: "separator"
      }) : d.span({}), _selectorUI = ContactsSelector({
        ref: "contactSelectorPopup",
        contactSelectedCallback: this.contactSelectedCallback,
        contactHighlightedCallback: this.contactHighlightedCallback,
        show_contacts: this.state.show_contacts,
        should_dropdown: this.props.should_dropdown,
        y_offset: 0,
        x_offset: 0,
        user: this.props.user,
        last_keydown: this.state.last_keydown,
        showNullHint: false,
        showContactsInNullState: this.props.showContactsInNullState,
        matchFullQUery: true,
        resultsLimit: 5
      }), this.props.should_dropdown ? [_inputUI, _dividerUI, _selectorUI] : [_selectorUI, _dividerUI, _inputUI]));
    }
  });
  return ContactsSelectorPopup;
});

//# sourceMappingURL=contacts_selector_popup.map
