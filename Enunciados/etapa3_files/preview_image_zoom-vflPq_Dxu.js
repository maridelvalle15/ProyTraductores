// Generated by CoffeeScript 1.7.1
define(['external/jquery.mousewheel', 'external/jquery.fs.zoomer', 'external/react', 'external/keymaster', 'external/underscore', 'jquery', 'modules/clean/react/image', 'modules/clean/react/sprite', 'modules/core/dom', 'modules/core/exception', 'modules/core/i18n', 'modules/core/uri'], function(mousewheel, Zoomer, React, keymaster, $u, $j, Image, Sprite, dom, JSException, i18n, URI) {
  var PreviewImageZoom, cx, d, _;
  cx = React.addons.classSet;
  d = React.DOM;
  _ = i18n._;
  PreviewImageZoom = React.createClass({
    statics: {
      open: function(thumbnailUrlTmpl, lastImageUrl) {
        var previewImageZoom, safeZoomContainer;
        safeZoomContainer = $j("<div />");
        $j(document.body).append(safeZoomContainer);
        previewImageZoom = PreviewImageZoom({
          thumbnailUrlTmpl: thumbnailUrlTmpl,
          lastImageUrl: lastImageUrl
        });
        return React.render(previewImageZoom, safeZoomContainer.get(0));
      }
    },
    displayName: "PreviewImageZoom",
    propTypes: {
      thumbnailUrlTmpl: React.PropTypes.string,
      lastImageUrl: React.PropTypes.string,
      enableMouseZoom: React.PropTypes.bool
    },
    getDefaultProps: function() {
      return {
        enableMouseZoom: false
      };
    },
    getInitialState: function() {
      return {
        imgLoaded: false,
        zoomOutDisabled: true,
        zoomInDisabled: false,
        dragDisabled: true
      };
    },
    componentWillMount: function() {
      this.originalImg = new window.Image();
      this.originalImg.onload = this._onOriginalImageLoaded;
      this.originalImg.onerror = this._onOriginalImageError;
      return this.originalImg.src = this._originalImageUrl();
    },
    componentDidMount: function() {
      var $node, $zoomClose, newScope;
      this._startControlsTimer();
      this._hideCursor();
      $zoomClose = $j(this.refs.previewZoomerClose.getDOMNode());
      $zoomClose.on("click", this._onClose);
      $node = $j(this.getDOMNode);
      $node.on("close", this._onClose);
      newScope = "previewimagezoom";
      if (PreviewImageZoom.didAssignEscape !== true) {
        key("esc", newScope, function() {
          return $node.trigger("close");
        });
        PreviewImageZoom.didAssignEscape = true;
      }
      this.prevKeyScope = key.getScope();
      key.setScope(newScope);
      return $j(this.refs.previewZoomerContainer.getDOMNode()).on('click.close', (function(_this) {
        return function(event) {
          if ($j(event.target).hasClass("zoomer")) {
            event.preventDefault();
            return _this._onClose();
          }
        };
      })(this));
    },
    componentWillUnmount: function() {
      clearTimeout(this.controlsHideTimer);
      this._showCursor();
      this._destroyZoomer();
      key.setScope(this.prevKeyScope);
      $j(this.getDOMNode).off("close");
      return $j(window).off("resize.zommer");
    },
    shouldComponentUpdate: function(nextProps, nextState) {
      return !$u.isEqual(nextProps, this.props) || !$u.isEqual(nextState, this.state);
    },
    _originalImageUrl: function() {
      return URI.parse(this.props.thumbnailUrlTmpl).updateQuery({
        size_mode: 5
      }).toString();
    },
    _onOriginalImageLoaded: function() {
      return this.setState({
        imgLoaded: true
      }, (function(_this) {
        return function() {
          return _this._bindZoomer();
        };
      })(this));
    },
    _onOriginalImageError: function() {
      JSException.assert("Error loading original full resoltuion image in zoom view");
      this.originalImg.src = this.props.lastImageUrl;
      return this.setState({
        imgLoaded: true
      }, (function(_this) {
        return function() {
          return _this._bindZoomer();
        };
      })(this));
    },
    _bindZoomer: function() {
      window.zoomer($j(this.refs.previewZoomer.getDOMNode()), {
        controls: {
          zoomIn: $j(this.refs.zoomControlZoomIn.getDOMNode()),
          zoomOut: $j(this.refs.zoomControlZoomOut.getDOMNode()),
          zoomLabel: $j(this.refs.zoomControlLabel.getDOMNode())
        },
        customClass: "preview-zoomer-style",
        retina: window.devicePixelRatio > 1,
        onZoomCallback: this._onZoomCallback
      });
      if (this.fitToZoom == null) {
        this.fitToZoom = this._getZoomPercent();
      }
      $j(window).off("resize.zoomer").on("resize.zoomer", (function(_this) {
        return function() {
          var _ref;
          zoomer($j((_ref = _this.refs.previewZoomer) != null ? _ref.getDOMNode() : void 0), "resize");
          return _this.fitToZoom = _this._getZoomPercent();
        };
      })(this));
      if (this.props.enableMouseZoom) {
        return $j(this.refs.previewZoomerContainer.getDOMNode()).off("mousewheel.zoom").on("mousewheel.zoom", (function(_this) {
          return function(event, delta) {
            event.preventDefault();
            if (delta > 0) {
              return _this._zoomIn();
            } else {
              return _this._zoomOut();
            }
          };
        })(this));
      }
    },
    _destroyZoomer: function() {
      var _ref;
      return window.zoomer($j((_ref = this.refs.previewZoomer) != null ? _ref.getDOMNode() : void 0), "destroy");
    },
    _startControlsTimer: function() {
      this._showControls();
      clearTimeout(this.controlsHideTimer);
      return this.controlsHideTimer = setTimeout((function(_this) {
        return function() {
          return _this._hideControls();
        };
      })(this), 3000);
    },
    _showControls: function() {
      var _ref;
      this._showCursor();
      $j((_ref = this.refs.previewZoomerToolbarContainer) != null ? _ref.getDOMNode() : void 0).css("opacity", 1);
      return $j(this.refs.previewZoomerClose.getDOMNode()).css("opacity", 1);
    },
    _hideControls: function() {
      var _ref;
      this._hideCursor();
      $j((_ref = this.refs.previewZoomerToolbarContainer) != null ? _ref.getDOMNode() : void 0).css("opacity", 0);
      return $j(this.refs.previewZoomerClose.getDOMNode()).css("opacity", 0);
    },
    _showCursor: function() {
      return $j('html').removeClass('no-cursor');
    },
    _hideCursor: function() {
      return $j('html').addClass('no-cursor');
    },
    _onZoomCallback: function(data) {
      return this.setState({
        zoomOutDisabled: data.atMinZoom,
        zoomInDisabled: data.atMaxZoom,
        dragDisabled: data.atMinZoom
      });
    },
    _getZoomPercent: function() {
      return parseFloat($j(this.refs.zoomControlLabel.getDOMNode()).text());
    },
    _zoomToFit: function() {
      var _ref;
      return $j((_ref = this.refs.zoomControlZoomOut) != null ? _ref.getDOMNode() : void 0).trigger("mousedown.zoomer");
    },
    _zoom100: function() {
      var _ref;
      return zoomer($j((_ref = this.refs.previewZoomer) != null ? _ref.getDOMNode() : void 0), "zoom100");
    },
    _zoomOut: function() {
      var _ref;
      return $j((_ref = this.refs.zoomControlZoomOut) != null ? _ref.getDOMNode() : void 0).trigger("mousedown.zoomer");
    },
    _zoomIn: function() {
      var _ref;
      return $j((_ref = this.refs.zoomControlZoomIn) != null ? _ref.getDOMNode() : void 0).trigger("mousedown.zoomer");
    },
    _onClose: function() {
      var parentNode;
      parentNode = this.getDOMNode().parentNode;
      React.unmountComponentAtNode(parentNode);
      return $j(parentNode).remove();
    },
    _onImageDoubleClick: function(event) {
      if (!$j(event.target).hasClass("zoomer")) {
        if (this._getZoomPercent() < 100) {
          return this._zoom100();
        } else {
          return this._zoomToFit();
        }
      }
    },
    _onMouseMove: function(event) {
      if ($j(event.target).parents(".preview-toolbar-overlay").length === 0) {
        return this._startControlsTimer();
      } else {
        return clearTimeout(this.controlsHideTimer);
      }
    },
    _renderClose: function() {
      return d.div({
        ref: "previewZoomerClose",
        className: "preview-zoomer-close"
      }, Sprite({
        group: "web",
        name: "lightbox_close"
      }));
    },
    _renderZoomControls: function() {
      var zoomInClassSet, zoomOutClassSet;
      zoomInClassSet = {
        "toolbar-button-entry": true,
        "zoom-in": true,
        "disabled": this.state.zoomInDisabled
      };
      zoomOutClassSet = {
        "toolbar-button-entry": true,
        "zoom-out": true,
        "disabled": this.state.zoomOutDisabled
      };
      return d.div({
        ref: "previewZoomerToolbarContainer",
        className: "preview-toolbar-overlay-container"
      }, d.div({
        className: "preview-toolbar-overlay"
      }, d.div({
        className: "preview-toolbar-content"
      }, d.div({
        ref: "zoomControlZoomOut",
        className: cx(zoomOutClassSet)
      }, Sprite({
        group: "web",
        name: "zoomout"
      })), d.div({
        ref: "zoomControlLabel",
        className: "zoom-label"
      }), d.div({
        ref: "zoomControlZoomIn",
        className: cx(zoomInClassSet)
      }, Sprite({
        group: "web",
        name: "zoom"
      })))));
    },
    _renderOriginalImage: function() {
      return [
        d.div({
          ref: "previewZoomer",
          className: "preview-zoomer",
          style: {
            textAlign: "center"
          },
          onDoubleClick: this._onImageDoubleClick
        }, d.img({
          className: "preview-zoom",
          src: this.originalImg.src
        })), this._renderClose(), this._renderZoomControls()
      ];
    },
    _renderLoading: function() {
      return [
        d.div({
          className: "preview-zoomer-loading"
        }, Image({
          src: "icons/white-on-dark-spinner.gif"
        })), this._renderClose()
      ];
    },
    render: function() {
      var zoomerContainerClassSet;
      zoomerContainerClassSet = {
        "preview-zoomer-container": true,
        "zoomer-drag-disabled": this.state.dragDisabled
      };
      return d.div({
        ref: "previewZoomerContainer",
        className: cx(zoomerContainerClassSet),
        onMouseMove: this._onMouseMove
      }, !this.state.imgLoaded ? this._renderLoading() : this._renderOriginalImage());
    }
  });
  return {
    PreviewImageZoom: PreviewImageZoom
  };
});

//# sourceMappingURL=preview_image_zoom.map
